collectors:
  - name: dogfight4; dogfight5; dogfight6
    frequency: SECOND
    type: http/json
    path: http://dogfight-ix04.se-ix.delta.prod:1942/@metrics/metrics; http://dogfight-ix05.se-ix.delta.prod:1942/@metrics/metrics; http://dogfight-ix06.se-ix.delta.prod:1942/@metrics/metrics
    selectors:
      - name: bids
        path: counters.['dogfight.global.bids.count'].count
        calculation: DIFF #DIFF|value|inc
      - name: passes
        path: counters.['dogfight.global.passes.count'].count
        calculation: DIFF
      - name: wins
        path: counters.['dogfight.global.victories.count'].count
        calculation: DIFF
  - name: dogfight
    frequency: SECOND
    type: aggregate
    path:
    selectors:
      - name: bids
        path: SUM/HEAD(dogfight4.bids, dogfight5.bids, dogfight6.bids)
        calculation: VALUE
      - name: passes
        path: SUM/HEAD(dogfight4.passes, dogfight5.passes, dogfight6.passes)
        calculation: VALUE
      - name: wins
        path: SUM/HEAD(dogfight4.wins, dogfight5.wins, dogfight6.wins)
        calculation: VALUE
  - name: dogfight4-min; dogfight5-min; dogfight6-min
    frequency: MINUTE
    type: aggregate
    path: dogfight4; dogfight5; dogfight6
    selectors:
      - name: bids
        path: AVG/ALL(${path}.bids)
        calculation: VALUE
      - name: passes
        path: AVG/ALL(${path}.passes)
        calculation: VALUE
      - name: wins
        path: AVG/ALL(${path}.wins)
        calculation: VALUE

# collector types = http/json | aggregate
# selector calculations = DIFF | VALUE
# path = <path> | SUM|AVG/HEAD|ALL(<path>...)
signals:
  - name: dogfight.bids.critical
    value: HT(1000)
    level: CRITICAL
  - name: dogfight.bids.warning
    value: LT(80)
    level: WARNING

dashboards:
  - name: dogfight
    rootpanel:
      label: Dogfight
      type: column
      panels:
        - label: Dogfight 4
          type: row
          panels:
            - label: Bids/s
              type: graph
              data: dogfight4-min.bids; dogfight4.bids
              yscale: 1000
              signals: [dogfight.bids.critical, dogfight.bids.warning]
            - label: Passes/s
              type: graph
              data: dogfight4.passes
              yscale: 10000
            - label: Wins/s
              type: graph
              data: dogfight4.wins
              yscale: 100
        - label: Dogfight 2
          type: row
          panels:
            - label: Bids/s
              type: graph
              data: dogfight5-min.bids; dogfight5.bids
              yscale: 1000
              signals: [dogfight.bids.critical, dogfight.bids.warning]
            - label: Passes/s
              type: graph
              data: dogfight5.passes
              yscale: 10000
            - label: Wins/s
              type: graph
              data: dogfight5.wins
              yscale: 100
        - label: Dogfight 6
          type: row
          panels:
            - label: Bids/s
              type: graph
              data: dogfight6-min.bids; dogfight6.bids
              yscale: 1000
              signals: [dogfight.bids.critical, dogfight.bids.warning]
            - label: Passes/s
              type: graph
              data: dogfight6.passes
              yscale: 10000
            - label: Wins/s
              type: graph
              data: dogfight6.wins
              yscale: 100

# HTTP-specific options.
http:

  # The port on which the HTTP server listens for service requests.
  port: 8080

  # The port on which the HTTP server listens for administrative requests.
  adminPort: 8081

  # Maximum number of threads.
  maxThreads: 100

  # Minimum number of thread to keep alive.
  minThreads: 10

  # The type of connector to use. Other valid values are "nonblocking" or "legacy". In general, the
  # blocking connector should be used for low-latency services with short request durations. The
  # nonblocking connector should be used for services with long request durations or which
  # specifically take advantage of Jetty's continuation support.
  # If you need SSL support, you can either choose from "nonblocking+ssl" or "legacy+ssl".
  connectorType: nonblocking

  # The maximum amount of time a connection is allowed to be idle before being closed.
  maxIdleTime: 1s

  # The number of threads dedicated to accepting connections. If omitted, this defaults to the
  # number of logical CPUs on the current machine.
  acceptorThreads: 3

  # The offset of the acceptor threads' priorities. Can be [-5...5], with -5 dropping the acceptor
  # threads to the lowest possible priority and with 5 raising them to the highest priority.
  acceptorThreadPriorityOffset: 0

  # The number of unaccepted requests to keep in the accept queue before refusing connections. If
  # set to -1 or omitted, the system default is used.
  acceptQueueSize: 100

  # The maximum number of buffers to keep in memory.
  maxBufferCount: 1024

  # The initial buffer size for reading requests.
  requestBufferSize: 32KB

  # The initial buffer size for reading request headers.
  requestHeaderBufferSize: 6KB

  # The initial buffer size for writing responses.
  responseBufferSize: 32KB

  # The initial buffer size for writing response headers.
  responseHeaderBufferSize: 6KB

  # Enables SO_REUSEADDR on the server socket.
  reuseAddress: true

  # Enables SO_LINGER on the server socket with the specified linger time.
  soLingerTime: 1s

  # The number of open connections at which the server transitions to a "low-resources" mode.
  lowResourcesConnectionThreshold: 25000

  # When in low-resources mode, the maximum amount of time a connection is allowed to be idle before
  # being closed. Overrides maxIdleTime.
  lowResourcesMaxIdleTime: 5s

  # If non-zero, the server will allow worker threads to finish processing requests after the server
  # socket has been closed for the given amount of time.
  shutdownGracePeriod: 2s

  # If true, the HTTP server will prefer X-Forwarded headers over their non-forwarded equivalents.
  useForwardedHeaders: true

  # If true, forces the HTTP connector to use off-heap, direct buffers.
  useDirectBuffers: true

  # The hostname of the interface to which the HTTP server socket wil be found. If omitted, the
  # socket will listen on all interfaces.
  # bindHost: app1.example.com

#  ssl:
#    keyStore: ./example.keystore
#    keyStorePassword: example
#
#    keyStoreType: JKS # (optional, JKS is default)

  # HTTP request log settings
  requestLog:
    # Settings for logging to stdout.
    console:
      # If true, write log statements to stdout.
      enabled: true

    # Settings for logging to a file.
    file:
      # If true, write log statements to a file.
      enabled: true

      # The file to which statements will be logged.
      currentLogFilename: ./logs/wally-requests.log

      #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
      # example.log will be truncated, and new statements written to it.
      archivedLogFilenamePattern: ./logs/wally-requests-%d.log.gz

      # The maximum number of log files to archive.
      archivedFileCount: 5

# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  # Logger-specific levels.
  loggers:

    # Sets the level for 'com.example.app' to DEBUG.
    com.example.helloWorld: DEBUG

    org.hibernate.SQL: ALL

  # Settings for logging to stdout.
  console:

    # If true, write log statements to stdout.
    enabled: true

    # Do not display log statements below this threshold to stdout.
    threshold: ALL

  # Settings for logging to a file.
  file:

    # If true, write log statements to a file.
    enabled: true

    # Do not write log statements below this threshold to the file.
    threshold: ALL

    # The file to which statements will be logged.
    currentLogFilename: ./logs/wally.log

    #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
    # example.log will be truncated, and new statements written to it.
    archivedLogFilenamePattern: ./logs/wally-%d.log.gz

    # The maximum number of log files to archive.
    archivedFileCount: 5


# HTTP-specific options.
http:

  # The port on which the HTTP server listens for service requests.
  port: 8080

  # The port on which the HTTP server listens for administrative requests.
  adminPort: 8081

  # Maximum number of threads.
  maxThreads: 100

  # Minimum number of thread to keep alive.
  minThreads: 10

  # The type of connector to use. Other valid values are "nonblocking" or "legacy". In general, the
  # blocking connector should be used for low-latency services with short request durations. The
  # nonblocking connector should be used for services with long request durations or which
  # specifically take advantage of Jetty's continuation support.
  # If you need SSL support, you can either choose from "nonblocking+ssl" or "legacy+ssl".
  connectorType: nonblocking

  # The maximum amount of time a connection is allowed to be idle before being closed.
  maxIdleTime: 1s

  # The number of threads dedicated to accepting connections. If omitted, this defaults to the
  # number of logical CPUs on the current machine.
  acceptorThreads: 3

  # The offset of the acceptor threads' priorities. Can be [-5...5], with -5 dropping the acceptor
  # threads to the lowest possible priority and with 5 raising them to the highest priority.
  acceptorThreadPriorityOffset: 0

  # The number of unaccepted requests to keep in the accept queue before refusing connections. If
  # set to -1 or omitted, the system default is used.
  acceptQueueSize: 100

  # The maximum number of buffers to keep in memory.
  maxBufferCount: 1024

  # The initial buffer size for reading requests.
  requestBufferSize: 32KB

  # The initial buffer size for reading request headers.
  requestHeaderBufferSize: 6KB

  # The initial buffer size for writing responses.
  responseBufferSize: 32KB

  # The initial buffer size for writing response headers.
  responseHeaderBufferSize: 6KB

  # Enables SO_REUSEADDR on the server socket.
  reuseAddress: true

  # Enables SO_LINGER on the server socket with the specified linger time.
  soLingerTime: 1s

  # The number of open connections at which the server transitions to a "low-resources" mode.
  lowResourcesConnectionThreshold: 25000

  # When in low-resources mode, the maximum amount of time a connection is allowed to be idle before
  # being closed. Overrides maxIdleTime.
  lowResourcesMaxIdleTime: 5s

  # If non-zero, the server will allow worker threads to finish processing requests after the server
  # socket has been closed for the given amount of time.
  shutdownGracePeriod: 2s

  # If true, the HTTP server will prefer X-Forwarded headers over their non-forwarded equivalents.
  useForwardedHeaders: true

  # If true, forces the HTTP connector to use off-heap, direct buffers.
  useDirectBuffers: true

  # The hostname of the interface to which the HTTP server socket wil be found. If omitted, the
  # socket will listen on all interfaces.
  # bindHost: app1.example.com

#  ssl:
#    keyStore: ./example.keystore
#    keyStorePassword: example
#
#    keyStoreType: JKS # (optional, JKS is default)

  # HTTP request log settings
  requestLog:
    # Settings for logging to stdout.
    console:
      # If true, write log statements to stdout.
      enabled: true

    # Settings for logging to a file.
    file:
      # If true, write log statements to a file.
      enabled: true

      # The file to which statements will be logged.
      currentLogFilename: ./logs/wally-requests.log

      #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
      # example.log will be truncated, and new statements written to it.
      archivedLogFilenamePattern: ./logs/wally-requests-%d.log.gz

      # The maximum number of log files to archive.
      archivedFileCount: 5

# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  # Logger-specific levels.
  loggers:

    # Sets the level for 'com.example.app' to DEBUG.
    com.example.helloWorld: DEBUG

    org.hibernate.SQL: ALL

  # Settings for logging to stdout.
  console:

    # If true, write log statements to stdout.
    enabled: true

    # Do not display log statements below this threshold to stdout.
    threshold: ALL

  # Settings for logging to a file.
  file:

    # If true, write log statements to a file.
    enabled: true

    # Do not write log statements below this threshold to the file.
    threshold: ALL

    # The file to which statements will be logged.
    currentLogFilename: ./logs/wally.log

    #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
    # example.log will be truncated, and new statements written to it.
    archivedLogFilenamePattern: ./logs/wally-%d.log.gz

    # The maximum number of log files to archive.
    archivedFileCount: 5